AWSTemplateFormatVersion: 2010-09-09
Description: Template creates a VPC peering connection either in the same account or across accounts.

Parameters:
  
  pNumberOfAzs:
    Type: Number
    Description: How many AZs is the local VPC deployed in?
    Default: 2
    AllowedValues:
      - 1
      - 2

  pVpcPeerPrivSubnets:
    Type: String
    Default: false
    Description: True will create Routes and NACL entries for both Private Subnets
    AllowedValues:
      - true
      - false
    
  pVpcPeerPrivDataSubnets:
    Type: String
    Default: false
    Description: True will create Routes and NACL entries for both Private Data Subnets
    AllowedValues:
      - true
      - false
  
  pVpcStackName:
    Type: String
    Description: Route Table and NACL info imported from the stack
  
  pVpcPeerConnectID:
    Type: String
    Description: ID in local account

  pVpcPeerDestVpcCidr:
    Type: String
    Description: Destination VPC Valid Network Cidr
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}|^$'

  pRuleNumber:
    Type: Number
    Default: 900
    Description: Rule number to aleviate overlap with other peering connections 
    AllowedValues:
        - 300
        - 400
        - 500
        - 600
        - 700
        - 800
        - 900
  

Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      pNumberOfAzs:
        default: Number of AZs
      pVpcPeerConnectID:
        default: VPC Peer Connection ID
      pVpcPeerDestVpcCidr:
        default: VPC Peer Destination CIDR
      pVpcStackName:
        default: VPC CloudFormation Stack Name
      pVpcPeerPrivSubnets:
        default: VPC Peer Private Subnets?
      pVpcPeerPrivDataSubnets:
        default: VPC Peer Private Data Subnets?
      pRuleNumber:
        default: Prefix for the rule number to aleviate overlap with other peering connections.
    
    ParameterGroups:
        - Label:
            default: VPC Peering Settings
          Parameters:
              - pNumberOfAzs
              - pVpcPeerConnectID
              - pVpcPeerDestVpcCidr
              - pVpcStackName
              - pVpcPeerPrivSubnets
              - pVpcPeerPrivDataSubnets
              - pRuleNumber

Conditions:

  CondPeerPrivSubnets: !Equals [true, !Ref pVpcPeerPrivSubnets]
  CondPeerPrivDataSubnets: !Equals [true, !Ref pVpcPeerPrivDataSubnets]
  CondTwoAz: !Equals [2, !Ref pNumberOfAzs]
  Cond2PeerPrivSubnets: !And [!Condition CondTwoAz, !Condition CondPeerPrivSubnets]
  Cond2PeerPrivDataSubnets: !And [!Condition CondTwoAz, !Condition CondPeerPrivDataSubnets]

Resources:

  # Route Table Routes

  routeTablePrivSubnetAz01:
    Type: AWS::EC2::Route
    Condition: CondPeerPrivSubnets
    Properties:
      DestinationCidrBlock: !Ref pVpcPeerDestVpcCidr
      RouteTableId: 
        Fn::ImportValue: !Sub ${pVpcStackName}-route-table-privSubnet-01
      VpcPeeringConnectionId: !Ref pVpcPeerConnectID
  
  routeTablePrivSubnetAz02:
    Type: AWS::EC2::Route
    Condition: Cond2PeerPrivSubnets
    Properties:
      DestinationCidrBlock: !Ref pVpcPeerDestVpcCidr
      RouteTableId: 
        Fn::ImportValue: !Sub ${pVpcStackName}-route-table-privSubnet-02
      VpcPeeringConnectionId: !Ref pVpcPeerConnectID
  
  routeTablePrivDataSubnetAz01:
    Type: AWS::EC2::Route
    Condition: CondPeerPrivDataSubnets
    Properties:
      DestinationCidrBlock: !Ref pVpcPeerDestVpcCidr
      RouteTableId: 
        Fn::ImportValue: !Sub ${pVpcStackName}-route-table-privDataSubnet-01
      VpcPeeringConnectionId: !Ref pVpcPeerConnectID
  
  routeTablePrivDataSubnetAz02:
    Type: AWS::EC2::Route
    Condition: Cond2PeerPrivDataSubnets
    Properties:
      DestinationCidrBlock: !Ref pVpcPeerDestVpcCidr
      RouteTableId: 
        Fn::ImportValue: !Sub ${pVpcStackName}-route-table-privDataSubnet-02
      VpcPeeringConnectionId: !Ref pVpcPeerConnectID
  
  # NACL Rules

  
  naclPrivSubnetAz01Ingress01:
    Type: AWS::EC2::NetworkAclEntry
    Condition: CondPeerPrivSubnets
    Properties:
      CidrBlock: !Ref pVpcPeerDestVpcCidr
      Egress: false
      NetworkAclId:
        Fn::ImportValue: !Sub ${pVpcStackName}-nacl-privSubnet-01
      Protocol: -1
      RuleAction: allow
      RuleNumber: !Ref pRuleNumber

  naclPrivSubnetAz02Ingress01:
    Type: AWS::EC2::NetworkAclEntry
    Condition: Cond2PeerPrivSubnets
    Properties:
      CidrBlock: !Ref pVpcPeerDestVpcCidr
      Egress: false
      NetworkAclId:
        Fn::ImportValue: !Sub ${pVpcStackName}-nacl-privSubnet-02
      Protocol: -1
      RuleAction: allow
      RuleNumber: !Ref pRuleNumber

  naclPrivDataSubnetAz01Ingress01:
    Type: AWS::EC2::NetworkAclEntry
    Condition: CondPeerPrivDataSubnets
    Properties:
      CidrBlock: !Ref pVpcPeerDestVpcCidr
      Egress: false
      NetworkAclId:
        Fn::ImportValue: !Sub ${pVpcStackName}-nacl-privDataSubnet-01
      Protocol: -1
      RuleAction: allow
      RuleNumber: !Ref pRuleNumber
  
  naclPrivDataSubnetAz01Ingress02:
    Type: AWS::EC2::NetworkAclEntry
    Condition: Cond2PeerPrivDataSubnets
    Properties:
      CidrBlock: !Ref pVpcPeerDestVpcCidr
      Egress: false
      NetworkAclId:
        Fn::ImportValue: !Sub ${pVpcStackName}-nacl-privDataSubnet-02
      Protocol: -1
      RuleAction: allow
      RuleNumber: !Ref pRuleNumber
